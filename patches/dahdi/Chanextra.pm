package Dahdi::Config::Gen::Chanextra;
use strict;

use Dahdi::Config::Gen qw(is_true);

sub new($$$) {
	my $pack = shift || die;
	my $gconfig = shift || die;
	my $genopts = shift || die;
	my $file = $ENV{CHAN_EXTRA_CHANNELS_FILE} || "/etc/asterisk/extra-channels.conf";
	my $self = {
			FILE	=> $file,
			GCONFIG	=> $gconfig,
			GENOPTS	=> $genopts,
		};
	bless $self, $pack;
	return $self;
}

# Since chan_dahdi definitions "leak" to the next ones, we try
# To reset some important definitions to their chan_dahdi defaults.
my %chan_dahdi_defaults = (
	context => 'default',
	group => '63', # FIXME: should not be needed. 
	overlapdial => 'no',
	busydetect => 'no',
	rxgain => 0,
	txgain => 0,
);

sub reset_chandahdi_values {
	foreach my $arg (@_) {
		if (exists $chan_dahdi_defaults{$arg}) {
			print "$arg = $chan_dahdi_defaults{$arg}\n";
		} else {
			print "$arg =\n";
		}
	}
}

sub gen_digital($$$) {
	my $self = shift || die;
	my $gconfig = shift || die;
	my $span = shift || die;
	my $num = $span->num() || die;
	die "Span #$num is analog" unless $span->is_digital();

	my $type = $span->type() || die "$0: Span #$num -- unkown type\n";
	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
	my $group = $gconfig->{'group'}{"$type"};
#	my $context = $gconfig->{'context'}{"$type"};
	my $context = "from-gsm";
	my @to_reset = qw/context group/;

#	die "$0: missing default group (termtype=$termtype)\n" unless defined($group);
	die "$0: missing default context\n" unless $context;

	my $sig = $span->signalling || die "missing signalling info for span #$num type $type";
	if($span->is_gsm()) {
		$sig = 'gsm';
	}

#	$group .= "," . (10 + $num);	# Invent unique group per span
	$group = (10 + $num);	# Invent unique group per span
	printf "group=$group\n";
	printf "context=$context\n";
#	printf "switchtype = %s\n", $span->switchtype;
	printf "signalling = %s\n", $sig;
	printf "smscodec=utf-8\n";
	printf "debugat=on\n";
	printf "tty=off\n";
	printf ";pin=1234\n";
	printf "channel => %s\n", Dahdi::Config::Gen::bchan_range($span);
	reset_chandahdi_values(@to_reset);
}

sub generate($) {
	my $self = shift || die;
	my $file = $self->{FILE};
	my $gconfig = $self->{GCONFIG};
	my $genopts = $self->{GENOPTS};
	#$gconfig->dump;
	my @spans = @_;
	warn "Empty configuration -- no spans\n" unless @spans;
	rename "$file", "$file.bak"
		or $! == 2	# ENOENT (No dependency on Errno.pm)
		or die "Failed to backup old config: $!\n";
	print "Generating $file\n" if $genopts->{verbose};
	open(F, ">$file") || die "$0: Failed to open $file: $!\n";
	my $old = select F;
	printf "; Autogenerated by $0 on %s\n", scalar(localtime);
	print  "; If you edit this file and execute $0 again,\n";
	print  "; your manual changes will be LOST.\n";
	print <<"HEAD";
; Dahdi Channels Configurations (chan_extra.conf)
;
; This is not intended to be a complete chan_extra.conf. Rather, it is intended
; to be #include-d by /etc/chan_extra.conf that will include the global settings
;

HEAD
	foreach my $span (@spans) {
		if($span->is_digital) {
			if($span->is_gsm) {
				printf "; Span %d: %s %s\n", $span->num, $span->name, $span->description;
				$self->gen_digital($gconfig, $span);
			}
		}
		print "\n";
	}
	close F;
	select $old;
}

1;

__END__

=head1 NAME

chanextra - Generate configuration for chan_extra channels.

=head1 SYNOPSIS

 use Dahdi::Config::Gen::Chanextra;

 my $cfg = new Dahdi::Config::Gen::Chanextra(\%global_config, \%genopts);
 $cfg->generate(@span_list);

=head1 DESCRIPTION

Generate the F</etc/asterisk/extra-channels.conf>
This is used as a configuration for asterisk(1).
It should be included in the main F</etc/asterisk/chan_extra.conf>.

Its location may be overriden via the environment variable 
C<CHAN_EXTRA_CHANNELS_FILE>.
